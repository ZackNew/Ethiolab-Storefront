{"code":"import { __assign } from \"tslib\";\r\n/* eslint-disable @typescript-eslint/restrict-template-expressions */\r\nimport ApolloClient from 'apollo-client';\r\nimport fetch from 'isomorphic-fetch';\r\nimport { ApolloLink } from 'apollo-link';\r\nimport { createHttpLink } from 'apollo-link-http';\r\nimport { InMemoryCache } from 'apollo-cache-inmemory';\r\nimport { Logger } from '@vue-storefront/core';\r\nimport { onError } from 'apollo-link-error';\r\nimport { RetryLink } from 'apollo-link-retry';\r\nimport { setContext } from 'apollo-link-context';\r\nimport { handleRetry } from './linkHandlers';\r\nimport { VENDURE_AUTH_TOKEN_NAME } from '../constants';\r\nvar createErrorHandler = function () {\r\n    return onError(function (_a) {\r\n        var graphQLErrors = _a.graphQLErrors, networkError = _a.networkError;\r\n        if (graphQLErrors) {\r\n            graphQLErrors.forEach(function (_a) {\r\n                var message = _a.message, locations = _a.locations, path = _a.path;\r\n                if (!(message === null || message === void 0 ? void 0 : message.includes('Resource Owner Password Credentials Grant'))) {\r\n                    if (!locations) {\r\n                        Logger.error(\"[GraphQL error]: Message: \" + message + \", Path: \" + path);\r\n                        return;\r\n                    }\r\n                    var parsedLocations = locations.map(function (_a) {\r\n                        var column = _a.column, line = _a.line;\r\n                        return \"[column: \" + column + \", line: \" + line + \"]\";\r\n                    });\r\n                    Logger.error(\"[GraphQL error]: Message: \" + message + \", Location: \" + parsedLocations.join(', ') + \", Path: \" + path);\r\n                }\r\n            });\r\n        }\r\n        if (networkError) {\r\n            Logger.error(\"[Network error]: \" + networkError);\r\n        }\r\n    });\r\n};\r\nexport var apolloLinkFactory = function (settings, handlers) {\r\n    var baseAuthLink = (handlers === null || handlers === void 0 ? void 0 : handlers.authLink) ||\r\n        setContext(function (apolloReq, _a) {\r\n            var headers = _a.headers;\r\n            return ({\r\n                headers: __assign({}, headers)\r\n            });\r\n        });\r\n    var httpLink = createHttpLink({\r\n        uri: settings.api.uri,\r\n        credentials: 'true',\r\n        fetch: fetch\r\n    });\r\n    var onErrorLink = createErrorHandler();\r\n    var errorRetry = new RetryLink({\r\n        attempts: handleRetry(),\r\n        delay: function () { return 0; }\r\n    });\r\n    var afterwareLink = new ApolloLink(function (operation, forward) {\r\n        return forward(operation).map(function (response) {\r\n            var context = operation.getContext();\r\n            var authCookie = context.response.headers.get(VENDURE_AUTH_TOKEN_NAME);\r\n            var hasNewCookie = authCookie && (settings.auth.getAuthCookie() !== authCookie);\r\n            if (hasNewCookie || !settings.auth.getAuthCookie()) {\r\n                settings.auth.setAuthCookie(authCookie);\r\n            }\r\n            return response;\r\n        });\r\n    });\r\n    return ApolloLink.from([\r\n        onErrorLink,\r\n        errorRetry,\r\n        baseAuthLink,\r\n        afterwareLink.concat(httpLink)\r\n    ]);\r\n};\r\nexport var apolloClientFactory = function (customOptions) {\r\n    return new ApolloClient(__assign({ cache: new InMemoryCache() }, customOptions));\r\n};\r\n//# sourceMappingURL=graphQL.js.map","references":["/home/eb/projs/eecommerce.web/ecommerce.web/node_modules/apollo-client/index.d.ts","/home/eb/projs/eecommerce.web/ecommerce.web/node_modules/isomorphic-fetch/fetch-npm-node.js","/home/eb/projs/eecommerce.web/ecommerce.web/node_modules/apollo-link/lib/index.d.ts","/home/eb/projs/eecommerce.web/ecommerce.web/node_modules/apollo-link-http/lib/index.d.ts","/home/eb/projs/eecommerce.web/ecommerce.web/node_modules/apollo-cache-inmemory/lib/index.d.ts","/home/eb/projs/eecommerce.web/ecommerce.web/node_modules/@vue-storefront/core/lib/src/index.d.ts","/home/eb/projs/eecommerce.web/ecommerce.web/node_modules/apollo-link-error/lib/index.d.ts","/home/eb/projs/eecommerce.web/ecommerce.web/node_modules/apollo-link-retry/lib/index.d.ts","/home/eb/projs/eecommerce.web/ecommerce.web/node_modules/apollo-link-context/lib/index.d.ts","/home/eb/projs/eecommerce.web/ecommerce.web/packages/api-client/src/helpers/vendureLink/linkHandlers.ts","/home/eb/projs/eecommerce.web/ecommerce.web/packages/api-client/src/types/setup.ts","/home/eb/projs/eecommerce.web/ecommerce.web/packages/api-client/src/helpers/constants.ts"],"map":"{\"version\":3,\"file\":\"graphQL.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/helpers/vendureLink/graphQL.ts\"],\"names\":[],\"mappings\":\"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\"}","dtsmap":{"name":"/home/eb/projs/eecommerce.web/ecommerce.web/packages/api-client/lib/helpers/vendureLink/graphQL.d.ts.map","writeByteOrderMark":false,"text":"{\"version\":3,\"file\":\"graphQL.d.ts\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/helpers/vendureLink/graphQL.ts\"],\"names\":[],\"mappings\":\"AACA,OAAO,YAAY,MAAM,eAAe,CAAC;AAEzC,OAAO,EAAE,UAAU,EAAE,MAAM,aAAa,CAAC;AAEzC,OAAO,EAAiB,qBAAqB,EAAE,MAAM,uBAAuB,CAAC;AAM7E,OAAO,EAAE,MAAM,EAAE,MAAM,mBAAmB,CAAC;AA+B3C,eAAO,MAAM,iBAAiB,aAClB,MAAM,aACL;IACT,QAAQ,CAAC,EAAE,UAAU,CAAC;CACvB,KACA,UAwCF,CAAC;AAEF,eAAO,MAAM,mBAAmB,kBACf,OAAO,MAAM,EAAE,GAAG,CAAC,KACjC,aAAa,qBAAqB,CAIjC,CAAC\"}"},"dts":{"name":"/home/eb/projs/eecommerce.web/ecommerce.web/packages/api-client/lib/helpers/vendureLink/graphQL.d.ts","writeByteOrderMark":false,"text":"import ApolloClient from 'apollo-client';\r\nimport { ApolloLink } from 'apollo-link';\r\nimport { NormalizedCacheObject } from 'apollo-cache-inmemory';\r\nimport { Config } from '../../types/setup';\r\nexport declare const apolloLinkFactory: (settings: Config, handlers?: {\r\n    authLink?: ApolloLink;\r\n}) => ApolloLink;\r\nexport declare const apolloClientFactory: (customOptions: Record<string, any>) => ApolloClient<NormalizedCacheObject>;\r\n//# sourceMappingURL=graphQL.d.ts.map"}}
